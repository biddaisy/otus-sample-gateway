{
	"info": {
		"_postman_id": "67812695-b873-4c8d-a378-b4dbdb9d3497",
		"name": "Otus-5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register first user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Registering first user...\");\r",
							"var jsonData = JSON.parse(pm.request.body.raw);\r",
							"postman.setEnvironmentVariable(\"login1\", jsonData.login);\r",
							"postman.setEnvironmentVariable(\"password1\", jsonData.password);\r",
							"console.log(\"User name: \", jsonData.login);\r",
							"console.log(\"User pass: \", jsonData.password);\r",
							"\r",
							"pm.expect(201).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access profile for unauthorized user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Getting user profile without authorization\");\r",
							"\r",
							"pm.expect(401).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/profiles/self",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles",
						"self"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login for first user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Logging in first user: \", postman.getEnvironmentVariable(\"login1\"));\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"console.log(\"Got session: \", jsonData.token);\r",
							"\r",
							"pm.expect(200).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{login1}}\",\r\n  \"password\": \"{{password1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update profile for first user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Updated profile for user: \", postman.getEnvironmentVariable(\"login1\"));\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"firstName1\", jsonData.firstName);\r",
							"postman.setEnvironmentVariable(\"lastName1\", jsonData.lastName);\r",
							"postman.setEnvironmentVariable(\"email1\", jsonData.email);\r",
							"console.log(\"First name updated to: \", jsonData.firstName);\r",
							"console.log(\"Last name updated to: \", jsonData.lastName);\r",
							"console.log(\"Email updated to: \", jsonData.email);\r",
							"\r",
							"pm.expect(200).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "session={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{login1}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profiles/self",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles",
						"self"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access profile for first user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Getting user profile for: \", postman.getEnvironmentVariable(\"login1\"));\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"console.log(\"First name updated to: \", jsonData.firstName);\r",
							"console.log(\"Last name updated to: \", jsonData.lastName);\r",
							"console.log(\"Email updated to: \", jsonData.email);\r",
							"\r",
							"pm.expect(200).to.eql(pm.response.code);\r",
							"pm.expect(postman.getEnvironmentVariable(\"firstName1\")).to.eql(jsonData.firstName);\r",
							"pm.expect(postman.getEnvironmentVariable(\"lastName1\")).to.eql(jsonData.lastName);\r",
							"pm.expect(postman.getEnvironmentVariable(\"email1\")).to.eql(jsonData.email);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "session={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/profiles/self",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles",
						"self"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout for first user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Logout for user: \", postman.getEnvironmentVariable(\"login1\"));\r",
							"\r",
							"pm.expect(204).to.eql(pm.response.code);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "session={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/logout",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register second user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Registring second user\");\r",
							"var jsonData = JSON.parse(pm.request.body.raw);\r",
							"postman.setEnvironmentVariable(\"login2\", jsonData.login);\r",
							"postman.setEnvironmentVariable(\"password2\", jsonData.password);\r",
							"console.log(\"User name: \", jsonData.login);\r",
							"console.log(\"User pass: \", jsonData.password);\r",
							"\r",
							"pm.expect(201).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{$randomUserName}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login for second user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Logging in second user: \", postman.getEnvironmentVariable(\"login2\"));\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token2\", jsonData.token);\r",
							"console.log(\"Got session: \", jsonData.token);\r",
							"\r",
							"pm.expect(200).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{login2}}\",\r\n  \"password\": \"{{password2}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verification of update profile for first user by second user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Updated profile for user \", postman.getEnvironmentVariable(\"login1\"), \" by user \", postman.getEnvironmentVariable(\"login2\"));\r",
							"console.log(\"HTTP status \", pm.response.code, \" returned\");\r",
							"pm.expect(401).to.eql(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "session={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{login1}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profiles/self",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profiles",
						"self"
					]
				}
			},
			"response": []
		}
	]
}